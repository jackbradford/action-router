!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AsyncResponse	Etc/async_response.php	/^class AsyncResponse {$/;"	c
CONTROLLERS	Config/config.php	/^		define('CONTROLLERS',		Settings::getDirective('controllers', 'ctrl'));$/;"	d
Config	Config/config.php	/^class Config {$/;"	c
DEFAULT_CONTROLLER	Config/config.php	/^		define('DEFAULT_CONTROLLER',Settings::getDirective('controllers', 'default'));$/;"	d
Db	Db/db_pdo.php	/^class Db {$/;"	c
DbFactory	Db/db_factory.php	/^class DbFactory extends Settings$/;"	c
IQueryPreparer	Db/intf/i_query_preparer.php	/^interface IQueryPreparer {$/;"	i
Logger	Etc/logger.php	/^class Logger {$/;"	c
MySqlQueryPreparer	Db/query_preparer.php	/^class MySqlQueryPreparer implements IQueryPreparer {$/;"	c
NotLoggedInException	Etc/exceptions.php	/^class NotLoggedInException extends Exception {}$/;"	c
Output	Router/output.php	/^class Output {$/;"	c
PreparedStatement	Db/prepared_stmt.php	/^class PreparedStatement {$/;"	c
PublicSettings	Config/settings.php	/^class PublicSettings extends Settings {}$/;"	c
QueryField	Db/query_field.php	/^class QueryField {$/;"	c
Request	Etc/request.php	/^class Request {$/;"	c
Router	Router/router.php	/^class Router extends Output {$/;"	c
RoutingDIContainer	Etc/dependency_container.php	/^class RoutingDIContainer {$/;"	c
Settings	Config/settings.php	/^abstract class Settings$/;"	c
SubmitItemException	Etc/exceptions.php	/^class SubmitItemException extends Exception {}$/;"	c
TEMPLATES	Config/config.php	/^		define('TEMPLATES',			Settings::getDirective('templates', 'tmp'));$/;"	d
UserManager	Etc/user_manager.php	/^class UserManager {$/;"	c
UserManagerException	Etc/exceptions.php	/^class UserManagerException extends Exception {}$/;"	c
__clone	Etc/async_response.php	/^	private function __clone() {}$/;"	f
__clone	Etc/request.php	/^	private function __clone() {}$/;"	f
__clone	Router/output.php	/^	private function __clone() {}$/;"	f
__construct	Db/db_pdo.php	/^	public function __construct($hn, $pw, $db = DATABASE, $un = GUEST, IQueryPreparer $qp) {$/;"	f
__construct	Db/prepared_stmt.php	/^	public function __construct($query, array $params) {$/;"	f
__construct	Db/query_field.php	/^	public function __construct($field, $alias = null, $value = null) {$/;"	f
__construct	Etc/async_response.php	/^	public function __construct(array $args) {$/;"	f
__construct	Etc/dependency_container.php	/^	public function __construct(Request $req, Db $db, Logger $logger, UserManager $user) {$/;"	f
__construct	Etc/logger.php	/^	public function __construct(Db $db) {$/;"	f
__construct	Etc/request.php	/^	public function __construct() {$/;"	f
__construct	Etc/user_manager.php	/^	public function __construct(Request $request, Settings $settings) {$/;"	f
__construct	Router/output.php	/^	private function __construct() {}$/;"	f
__construct	Router/router.php	/^	private function __construct(RoutingDIContainer $dc) {$/;"	f
__get	Config/settings.php	/^	public function __get($keys) {$/;"	f
__isset	Config/settings.php	/^	public function __isset($key) {$/;"	f
action	Router/router.php	/^			$this->action = $action;$/;"	v
action	Router/router.php	/^	private		$action;$/;"	v
actionFlds	Router/router.php	/^		$actionFlds	=	[new QueryField('action')];$/;"	v
addDirectivesToSection	Config/settings.php	/^	private static function addDirectivesToSection($sectName, $dirs, $private = FALSE) {$/;"	f
addEntryToDatabase	Etc/logger.php	/^	private function addEntryToDatabase() {$/;"	f
addEntryToLogFile	Etc/logger.php	/^	private function addEntryToLogFile() {$/;"	f
addFieldIndexedByFieldName	Db/db_pdo.php	/^	private function addFieldIndexedByFieldName($field) {$/;"	f
addFieldIndexedByTable	Db/db_pdo.php	/^	private function addFieldIndexedByTable($table, $field) {$/;"	f
addFields	Db/db_pdo.php	/^	private function addFields($table, $fields) {$/;"	f
alias	Db/query_field.php	/^		$this->alias	=	$alias;$/;"	v
askForAsyncLogin	Etc/user_manager.php	/^	public static function askForAsyncLogin() {$/;"	f
askForCLILogin	Etc/user_manager.php	/^	public static function askForCLILogin() {$/;"	f
attemptLogin	Etc/user_manager.php	/^	private function attemptLogin($user) {$/;"	f
attemptSetLoggedInUser	Etc/user_manager.php	/^	private function attemptSetLoggedInUser() {$/;"	f
auth	Etc/user_manager.php	/^			$auth = ($this->user->hasAccess([$auths[$method]])) ? true : false;$/;"	v
authorize	Etc/user_manager.php	/^	public function authorize($method) {$/;"	f
auths	Etc/user_manager.php	/^		$auths	=	Settings::getDirective(); $/;"	v
auths	Etc/user_manager.php	/^		$auths	=	[$/;"	v
baseTable	Db/db_pdo.php	/^			$this->baseTable	=	$table;$/;"	v
baseTable	Db/db_pdo.php	/^			$this->baseTable = $table;$/;"	v
baseTable	Db/db_pdo.php	/^		$this->baseTable	=	null;$/;"	v
baseTable	Db/db_pdo.php	/^	private	$baseTable;$/;"	v
baseTable	Db/query_preparer.php	/^		$baseTable	=	$options->baseTable;$/;"	v
callClientApp	Router/router.php	/^	public function callClientApp() {$/;"	f
callRequestedAction	Router/router.php	/^	public function callRequestedAction() {$/;"	f
capsule	Config/integrate_sentinel.php	/^$capsule	=	new Capsule;$/;"	v
condition	Db/db_pdo.php	/^	public function condition($field, $operator, $value, $conjunction=null) {$/;"	f
conditions	Db/db_pdo.php	/^		$this->conditions	=	[];$/;"	v
conditions	Db/db_pdo.php	/^	private	$conditions		=	[];$/;"	v
conditions	Db/query_preparer.php	/^		$conditions	=	$options->conditions;$/;"	v
conditionsToQuerySubstring	Db/query_preparer.php	/^	private function conditionsToQuerySubstring($conditions) {$/;"	f
conn	Db/db_pdo.php	/^		$this->conn		=	$this->establishConnection($pw);$/;"	v
conn	Db/db_pdo.php	/^	private	$conn;$/;"	v
content	Router/output.php	/^		$this->content = $content;$/;"	v
content	Router/output.php	/^	protected $content		=	null;$/;"	v
content	Router/router.php	/^		$content	=	$this->controller->{ $action }();$/;"	v
controller	Router/router.php	/^			$controller	=	new $ctrlModel($this->router, $this->dc);$/;"	v
controller	Router/router.php	/^			$this->controller	=	$controller;$/;"	v
controller	Router/router.php	/^	private		$controller;$/;"	v
createDatabaseFields	Etc/logger.php	/^	private function createDatabaseFields(array $values) {$/;"	f
createFieldsClauseForInsertQuery	Db/query_preparer.php	/^	private function createFieldsClauseForInsertQuery($fields) {$/;"	f
createFieldsClauseForSelectQuery	Db/query_preparer.php	/^	private function createFieldsClauseForSelectQuery($fields) {$/;"	f
createJoinClauseForSelectQuery	Db/query_preparer.php	/^	private function createJoinClauseForSelectQuery($joins) {$/;"	f
createOrderByClauseForSelectQuery	Db/query_preparer.php	/^	private function createOrderByClauseForSelectQuery($orderBy) {$/;"	f
createValuesClauseForInsertQuery	Db/query_preparer.php	/^	private function createValuesClauseForInsertQuery($fields) {$/;"	f
createWhereClauseForSelectQuery	Db/query_preparer.php	/^	private function createWhereClauseForSelectQuery($conditions) {$/;"	f
credentials	Etc/user_manager.php	/^		$credentials	= [$/;"	v
credentials	Etc/user_manager.php	/^		$credentials = (empty($credentials))$/;"	v
credentials	Etc/user_manager.php	/^		$credentials = [$/;"	v
ctrl	Etc/request.php	/^		$ctrl	=	$this->requestParameters['controller'];$/;"	v
ctrl	Router/router.php	/^			$ctrl				=	$results[$j]['controller'];$/;"	v
ctrlFlds	Router/router.php	/^		$ctrlFlds	=	[new QueryField('controller')];$/;"	v
ctrlModel	Router/router.php	/^			$ctrlModel	=	CONTROLLERS[$this->request->getNameOfRequestedController()];$/;"	v
data	Etc/async_response.php	/^		$this->data	=	$data;$/;"	v
data	Etc/async_response.php	/^		$this->data = (isset($args['data']))$/;"	v
data	Etc/async_response.php	/^	private $data;$/;"	v
database	Db/db_pdo.php	/^		$this->database	=	$db;$/;"	v
database	Db/db_pdo.php	/^	private	$database;$/;"	v
db	Db/db_factory.php	/^		$db		=	parent::getDirective('db', 'database');$/;"	v
db	Etc/dependency_container.php	/^		$this->db		=	$db;$/;"	v
db	Etc/dependency_container.php	/^	public $db;$/;"	v
db	Etc/logger.php	/^		$this->db	=	$db;$/;"	v
db	Etc/logger.php	/^	private $db;$/;"	v
db	Router/router.php	/^			$db			=	DbFactory::getDbInst();$/;"	v
db	Router/router.php	/^			$this->db		=	$dc->db;$/;"	v
db	Router/router.php	/^	private		$db;$/;"	v
dc	Router/router.php	/^			$dc			=	new RoutingDIContainer($request, $db, $logger, $user);$/;"	v
dc	Router/router.php	/^			$this->dc		=	$dc;$/;"	v
dc	Router/router.php	/^	private		$dc;$/;"	v
decodePostedJSON	Etc/request.php	/^	public function decodePostedJSON()$/;"	f
defineGlobalConstants	Config/config.php	/^	private function defineGlobalConstants() {$/;"	f
deleteRecords	Db/db_pdo.php	/^	public function deleteRecords($table) {$/;"	f
dirSet	Config/settings.php	/^				$dirSet	=	$dirSet[$key];$/;"	v
dirSet	Config/settings.php	/^		$dirSet	=	self::$publicDirectives;$/;"	v
dirs	Config/settings.php	/^			$dirs		=	self::unpackSettings($array);$/;"	v
dsn	Db/db_pdo.php	/^		$dsn	=	'mysql:dbname=' . $this->database . ';';$/;"	v
e	Db/db_pdo.php	/^			$e	=	$pdoStmt->errorInfo();$/;"	v
e	Etc/logger.php	/^		$this->e	=	$e;$/;"	v
e	Etc/logger.php	/^	private $e;$/;"	v
establishConnection	Db/db_pdo.php	/^	private function establishConnection($password) {$/;"	f
execute	Db/db_pdo.php	/^	public function execute() {$/;"	f
extractSection	Config/settings.php	/^	private static function extractSection($section) {$/;"	f
fetchAllResults	Db/db_pdo.php	/^	public function fetchAllResults() {$/;"	f
field	Db/query_field.php	/^		$this->field	=	$field;$/;"	v
fieldExists	Db/db_pdo.php	/^	private function fieldExists($field) {$/;"	f
fieldMap	Etc/request.php	/^	private	$fieldMap;$/;"	v
fields	Db/db_pdo.php	/^		$fields	=	(isset($options['fields'])) ? $options['fields'] : [];$/;"	v
fields	Db/db_pdo.php	/^		$this->fields		=	[];$/;"	v
fields	Db/db_pdo.php	/^	private	$fields			=	[];$/;"	v
fields	Db/db_pdo.php	/^	public function fields($options) {$/;"	f
fields	Etc/logger.php	/^		$fields	=	[];$/;"	v
findUser	Etc/user_manager.php	/^	protected function findUser(array $credentials) {$/;"	f
flushAll	Router/output.php	/^	protected function flushAll() {$/;"	f
flushContent	Router/output.php	/^	protected function flushContent() {$/;"	f
getActionName	Router/router.php	/^	public function getActionName() {$/;"	f
getControllerName	Router/router.php	/^	public function getControllerName() {$/;"	f
getDbInst	Db/db_factory.php	/^	public static function getDbInst() {$/;"	f
getDirective	Config/settings.php	/^	public static function getDirective($section, ...$keys) {$/;"	f
getDirectiveValue	Config/settings.php	/^	private static function getDirectiveValue($dirs, $key) {$/;"	f
getEmail	Etc/user_manager.php	/^	public function getEmail() {$/;"	f
getFullName	Etc/user_manager.php	/^	public function getFullName() {$/;"	f
getId	Etc/user_manager.php	/^	public function getId() {$/;"	f
getJSONResponse	Etc/async_response.php	/^	public function getJSONResponse() {$/;"	f
getNameOfRequestedAction	Etc/request.php	/^	public function getNameOfRequestedAction() {$/;"	f
getNameOfRequestedController	Etc/request.php	/^	public function getNameOfRequestedController() {$/;"	f
getParams	Db/prepared_stmt.php	/^	public function getParams() {$/;"	f
getQuery	Db/prepared_stmt.php	/^	public function getQuery() {$/;"	f
getRequestURL	Etc/request.php	/^	public function getRequestURL() {$/;"	f
getRequestedPage	Etc/request.php	/^	public function getRequestedPage() {$/;"	f
getUserData	Etc/user_manager.php	/^	public function getUserData() {$/;"	f
guest	Etc/user_manager.php	/^		$guest			=	$this->settings->guest_user;$/;"	v
handler	Db/db_pdo.php	/^		$handler	=	self::EXEC_HANDLERS[$this->queryType];$/;"	v
hasAccess	Etc/user_manager.php	/^	public function hasAccess($permissions) {$/;"	f
hasAlias	Db/query_field.php	/^	public function hasAlias() {$/;"	f
hasValue	Db/query_field.php	/^	public function hasValue() {$/;"	f
host	Db/db_factory.php	/^		$host	=	parent::getDirective('db', 'hostname');$/;"	v
hostname	Db/db_pdo.php	/^		$this->hostname	=	$hn;$/;"	v
hostname	Db/db_pdo.php	/^	private	$hostname;$/;"	v
init	Router/router.php	/^	public static function init($iniPath) {$/;"	f
insertRecord	Db/db_pdo.php	/^	public function insertRecord($table, array $options=[]) {$/;"	f
isAsync	Etc/request.php	/^	public function isAsync() {$/;"	f
isAuthRequest	Etc/request.php	/^	public function isAuthRequest() {$/;"	f
isAuthorizedToMakeRequest	Etc/user_manager.php	/^	public function isAuthorizedToMakeRequest() {$/;"	f
isFromCLI	Etc/request.php	/^	public function isFromCLI() {$/;"	f
isFromGuest	Etc/request.php	/^	public function isFromGuest() {$/;"	f
isLoggedIn	Etc/user_manager.php	/^	public function isLoggedIn() {$/;"	f
isPrivate	Config/settings.php	/^			$isPrivate	=	self::sectionIsPrivate($array);$/;"	v
joinTable	Db/db_pdo.php	/^	public function joinTable($type, $table, $on, $operator, $compareTo) {$/;"	f
joins	Db/db_pdo.php	/^		$this->joins		=	[];$/;"	v
joins	Db/db_pdo.php	/^	private	$joins			=	[];$/;"	v
json	Etc/request.php	/^		$json	=	json_decode($_POST['json'], true);$/;"	v
keys	Config/settings.php	/^		$keys	=	$this->parseKeysArg($keys);$/;"	v
lo	Config/user_init.php	/^			$lo	=	'grid';$/;"	v
lo	Config/user_init.php	/^			$lo =	'grid';$/;"	v
lo	Config/user_init.php	/^			$lo =	'list';$/;"	v
load	Config/settings.php	/^	public static function load($ini, $processSections = TRUE) {$/;"	f
loadRoutes	Router/router.php	/^	private function loadRoutes() {$/;"	f
loadSchema	Db/db_pdo.php	/^	private function loadSchema() {$/;"	f
loadUserManagementSystem	Config/config.php	/^	private function loadUserManagementSystem() {$/;"	f
logError	Etc/logger.php	/^	public function logError($e) {$/;"	f
logger	Etc/dependency_container.php	/^		$this->logger	=	$logger;$/;"	v
logger	Etc/dependency_container.php	/^	public $logger;$/;"	v
logger	Router/router.php	/^			$logger		=	new Logger($db);$/;"	v
logger	Router/router.php	/^			$this->logger	=	$dc->logger;$/;"	v
logger	Router/router.php	/^	private		$logger;$/;"	v
login	Etc/user_manager.php	/^	protected function login(array $credentials) {$/;"	f
login	Router/router.php	/^				$login = ($request->isAsync()) ? 'askForAsyncLogin' : 'sendToLoginPage';$/;"	v
loginAdmin	Etc/user_manager.php	/^	public function loginAdmin(array $credentials = []) {$/;"	f
loginCLIAdmin	Etc/user_manager.php	/^	public function loginCLIAdmin() {$/;"	f
loginGuest	Etc/user_manager.php	/^	public function loginGuest() {$/;"	f
logout	Etc/user_manager.php	/^	public function logout() {$/;"	f
m	Db/db_pdo.php	/^					$m	=	__METHOD__ . ": Fields passed in 'field' option must$/;"	v
m	Db/db_pdo.php	/^			$m	=	__METHOD__ . ": $this->queryType failed on execute(). "$/;"	v
m	Db/db_pdo.php	/^			$m	=	__METHOD__ . ' $value argument may not be an array.';$/;"	v
m	Db/db_pdo.php	/^			$m	=	__METHOD__ . ': Missing required option: \\'fields\\'.';$/;"	v
m	Db/db_pdo.php	/^			$m = __METHOD__ . ': No PDO Statement.';$/;"	v
m	Db/prepared_stmt.php	/^			$m	=	__METHOD__ . ' error: ' . $e->getMessage();$/;"	v
m	Db/prepared_stmt.php	/^			$m	=	__METHOD__ .': Query must be a string.';$/;"	v
m	Db/query_preparer.php	/^				$m	=	__METHOD__ . ' Arrays are not valid values for conditions.';$/;"	v
m	Etc/async_response.php	/^			$m	=	__METHOD__.': Argument for success status expects boolean.';$/;"	v
m	Etc/logger.php	/^			$m	=	$this->e->getMessage() . "\\n Trace:\\n";$/;"	v
m	Etc/logger.php	/^			$m	=	__METHOD__ . ' expects either an Exception or a String.';$/;"	v
m	Etc/request.php	/^			$m	=	__METHOD__ . ': Invalid controller requested.';$/;"	v
m	Etc/user_manager.php	/^			$m	=	__METHOD__ . ': Could not end user session.';$/;"	v
m	Etc/user_manager.php	/^			$m	=	__METHOD__ . ': No permissions for the given function could be found. ';$/;"	v
m	Router/output.php	/^			$m	=	__METHOD__ . " expects the \\$info array to include 'title', ";$/;"	v
m	Router/output.php	/^			$m	=	__METHOD__ . ' Missing Argument: expects $content.';$/;"	v
m	Router/output.php	/^			$m	=	__METHOD__ . ': No content found.';$/;"	v
m	Router/output.php	/^			$m	=	__METHOD__ . ': No template path found.';$/;"	v
m	Router/output.php	/^			$m = __METHOD__ . ' expects $metaDesc as string.';$/;"	v
m	Router/output.php	/^			$m = __METHOD__ . ' expects $section as string.';$/;"	v
m	Router/output.php	/^			$m = __METHOD__ . ' expects $title as string.';$/;"	v
m	Router/output.php	/^			$m = __METHOD__ . ' expects argument $templatePath as string.';$/;"	v
m	Router/output.php	/^			$m = __METHOD__ . ': No content found.';$/;"	v
m	Router/router.php	/^			$m	=	$e->getMessage() . ' ' . $e->getTraceAsString();$/;"	v
m	Router/router.php	/^			$m	=	'Could not construct Router.';$/;"	v
m	Router/router.php	/^			$m = __METHOD__ . ': Invalid controller.';$/;"	v
message	Config/settings.php	/^			$message	=	__METHOD__ . ": $key not found.";$/;"	v
message	Db/db_pdo.php	/^			$message	=	__METHOD__ . ', PDO Error: ' . $e->getMessage();$/;"	v
message	Db/db_pdo.php	/^			$message	=	__METHOD__ . ': DELETE statements do not require fields.$/;"	v
message	Db/db_pdo.php	/^			$message	=	__METHOD__ . ': Invalid field given: ' . $table;$/;"	v
message	Db/db_pdo.php	/^			$message	=	__METHOD__ . ': Invalid table given: ' . $table;$/;"	v
message	Db/db_pdo.php	/^			$message = __METHOD__ . ': Missing conjunction.';$/;"	v
message	Db/db_pdo.php	/^		$message = __METHOD__ . ': Given field not found in schema: ' .$field;$/;"	v
message	Etc/async_response.php	/^		$this->message	=	htmlentities($msg);$/;"	v
message	Etc/async_response.php	/^		$this->message = (isset($args['message']))$/;"	v
message	Etc/async_response.php	/^	private $message;$/;"	v
message	Etc/user_manager.php	/^			$message = __METHOD__.': Could not log in user: '.$user->email.'.';$/;"	v
message	Etc/user_manager.php	/^		$message	=	"\\nNot Authorized:\\nPlease log in as an administrator ";$/;"	v
message	Router/router.php	/^				$message	=	'User must log in; request was not for authorization. ';$/;"	v
message	Router/router.php	/^			$message = __METHOD__ . ': Action not valid for selected controller';$/;"	v
message	Router/router.php	/^			$message = __METHOD__ . ': User-Defined controller returned FALSE.';$/;"	v
metaDesc	Router/output.php	/^		$this->metaDesc = htmlspecialchars($metaDesc);$/;"	v
metaDesc	Router/output.php	/^	protected $metaDesc		=	null;$/;"	v
options	Db/db_pdo.php	/^		$this->options		=	$options;$/;"	v
options	Db/db_pdo.php	/^		$this->options		=	[];$/;"	v
options	Db/db_pdo.php	/^	private	$options		=	[];$/;"	v
orderBy	Db/db_pdo.php	/^		$this->orderBy		=	[];$/;"	v
orderBy	Db/db_pdo.php	/^	private	$orderBy		=	[];$/;"	v
orderBy	Db/db_pdo.php	/^	public function orderBy($field, $direction = self::ASC) {$/;"	f
parameterSpecified	Etc/request.php	/^	public function parameterSpecified($parameter) {$/;"	f
params	Db/prepared_stmt.php	/^			$this->params	=	$params;$/;"	v
params	Db/query_preparer.php	/^		$this->params	=	[];$/;"	v
params	Db/query_preparer.php	/^	private $params = [];$/;"	v
params	Etc/request.php	/^		$params = [];$/;"	v
parseIni	Config/settings.php	/^	private static function parseIni($ini, $processSections) {$/;"	f
parseKeysArg	Config/settings.php	/^	private function parseKeysArg($keys) {$/;"	f
parseRequest	Etc/request.php	/^	private function parseRequest()$/;"	f
pass	Db/db_factory.php	/^		$pass	=	parent::getDirective('db', 'password');$/;"	v
pdoStmt	Db/db_pdo.php	/^			$this->pdoStmt	=	$pdoStmt;$/;"	v
pdoStmt	Db/db_pdo.php	/^		$pdoStmt	=	$this->conn->prepare($prepStmt->getQuery());$/;"	v
pdoStmt	Db/db_pdo.php	/^		$pdoStmt	=	$this->conn->query($q);$/;"	v
pdoStmt	Db/db_pdo.php	/^		$this->pdoStmt		=	null;$/;"	v
pdoStmt	Db/db_pdo.php	/^	private $pdoStmt;$/;"	v
prepStmt	Db/db_pdo.php	/^		$prepStmt	=	$this->qp->{$handler}( (object) [$/;"	v
prepareDeleteStmt	Db/intf/i_query_preparer.php	/^	public function prepareDeleteStmt($options);$/;"	f
prepareDeleteStmt	Db/query_preparer.php	/^	public function prepareDeleteStmt($options) {$/;"	f
prepareInsertStmt	Db/intf/i_query_preparer.php	/^	public function prepareInsertStmt($options);$/;"	f
prepareInsertStmt	Db/query_preparer.php	/^	public function prepareInsertStmt($options) {$/;"	f
prepareSelectStmt	Db/intf/i_query_preparer.php	/^	public function prepareSelectStmt($options);$/;"	f
prepareSelectStmt	Db/query_preparer.php	/^	public function prepareSelectStmt($options) {$/;"	f
prepareUpdateStmt	Db/intf/i_query_preparer.php	/^	public function prepareUpdateStmt($options);$/;"	f
prepareUpdateStmt	Db/query_preparer.php	/^	public function prepareUpdateStmt($options) {$/;"	f
privateDirectives	Config/settings.php	/^	static private $privateDirectives = [];$/;"	v
publicDirectives	Config/settings.php	/^	static private $publicDirectives = [];$/;"	v
q	Db/db_pdo.php	/^		$q			=	"SELECT column_name, table_name FROM information_schema.columns$/;"	v
q_substr	Db/query_preparer.php	/^		$q_substr	=	'';$/;"	v
qp	Db/db_factory.php	/^		$qp		=	new MySqlQueryPreparer();$/;"	v
qp	Db/db_pdo.php	/^		$this->qp		=	$qp;$/;"	v
qp	Db/db_pdo.php	/^	private $qp;$/;"	v
query	Db/prepared_stmt.php	/^			$this->query	=	$query;$/;"	v
query	Db/query_preparer.php	/^			$query	=	'ORDER BY ';$/;"	v
query	Db/query_preparer.php	/^			$query	=	substr($query, 0, -2); \/\/ Removes trailing comma.$/;"	v
query	Db/query_preparer.php	/^		$query		=	'DELETE FROM ' . $baseTable;$/;"	v
query	Db/query_preparer.php	/^		$query	=	' (';$/;"	v
query	Db/query_preparer.php	/^		$query	=	'';$/;"	v
query	Db/query_preparer.php	/^		$query	=	'INSERT INTO ' . $options->baseTable$/;"	v
query	Db/query_preparer.php	/^		$query	=	'SELECT '$/;"	v
query	Db/query_preparer.php	/^		$query	=	'UPDATE ' . $options->baseTable . ' SET ';$/;"	v
query	Db/query_preparer.php	/^		$query	=	'VALUES (';$/;"	v
query	Db/query_preparer.php	/^		$query	=	substr($query, 0, -2); \/\/ Removes trailing comma.$/;"	v
query	Db/query_preparer.php	/^		$query = '';$/;"	v
queryType	Db/db_pdo.php	/^		$this->queryType	=	null;$/;"	v
queryType	Db/db_pdo.php	/^		$this->queryType	=	self::INSERT;$/;"	v
queryType	Db/db_pdo.php	/^		$this->queryType	=	self::SELECT;$/;"	v
queryType	Db/db_pdo.php	/^		$this->queryType	=	self::UPDATE;$/;"	v
queryType	Db/db_pdo.php	/^		$this->queryType = self::DEL;$/;"	v
queryType	Db/db_pdo.php	/^	private	$queryType;$/;"	v
request	Etc/dependency_container.php	/^		$this->request	=	$req;$/;"	v
request	Etc/dependency_container.php	/^	public $request;$/;"	v
request	Etc/user_manager.php	/^		$this->request	= $request;$/;"	v
request	Etc/user_manager.php	/^	protected $request;$/;"	v
request	Router/router.php	/^			$request	=	new Request();$/;"	v
request	Router/router.php	/^			$this->request	=	$dc->request;$/;"	v
request	Router/router.php	/^	private		$request;$/;"	v
requestParameters	Etc/request.php	/^		$this->requestParameters = $params;$/;"	v
requestParameters	Etc/request.php	/^	private	$requestParameters;$/;"	v
requestedPage	Etc/request.php	/^	private	$requestedPage;$/;"	v
res	Router/router.php	/^			$res	=	new AsyncResponse([$/;"	v
resetParams	Db/query_preparer.php	/^	private function resetParams() {$/;"	f
resetQuery	Db/db_pdo.php	/^	private function resetQuery() {$/;"	f
result	Router/router.php	/^			$result	= (!$this->request->isAsync() && $serveClientAppOnSync)$/;"	v
results	Router/router.php	/^		$results	=	$this->db->select('actions')$/;"	v
routeAndExecuteRequest	Router/router.php	/^	public function routeAndExecuteRequest($serveClientAppOnSync=true) {$/;"	f
routes	Router/router.php	/^			$this->routes 	=	$this->loadRoutes();$/;"	v
routes	Router/router.php	/^		$routes		=	[];$/;"	v
routes	Router/router.php	/^	private		$routes				=	array();$/;"	v
schema	Db/db_pdo.php	/^		$schema		=	[];$/;"	v
schema	Db/db_pdo.php	/^		$this->schema	=	$this->loadSchema();$/;"	v
schema	Db/db_pdo.php	/^	private	$schema;$/;"	v
section	Router/output.php	/^		$this->section = htmlspecialchars($section);$/;"	v
section	Router/output.php	/^	protected $section		=	null;$/;"	v
sectionDirs	Config/settings.php	/^			$sectionDirs = self::$privateDirectives[$section];$/;"	v
sectionDirs	Config/settings.php	/^			$sectionDirs = self::$publicDirectives[$section];$/;"	v
sectionDirs	Config/settings.php	/^		$sectionDirs	=	self::extractSection($section);$/;"	v
sectionIsPrivate	Config/settings.php	/^	private static function sectionIsPrivate($settings) {$/;"	f
select	Db/db_pdo.php	/^	public function select($table) {$/;"	f
sendJSONResponse	Etc/async_response.php	/^	public function sendJSONResponse() {$/;"	f
sendToLoginPage	Etc/user_manager.php	/^	public static function sendToLoginPage() {$/;"	f
serveContent	Router/router.php	/^	public function serveContent() {$/;"	f
serveContentOnly	Router/router.php	/^			$this->serveContentOnly = ($setting) ? true : false;$/;"	v
serveContentOnly	Router/router.php	/^			$this->serveContentOnly = ($this->serveContentOnly === false)$/;"	v
serveContentOnly	Router/router.php	/^	private		$serveContentOnly	=	false;$/;"	v
serveErrorNotice	Router/router.php	/^	public function serveErrorNotice($e) {$/;"	f
setConfigurationFromFile	Config/config.php	/^	public static function setConfigurationFromFile($iniPath) {$/;"	f
setContent	Router/output.php	/^	public function setContent($content) {$/;"	f
setController	Router/router.php	/^	public function setController(IRequestController $controller) {$/;"	f
setControllerAction	Router/router.php	/^	public function setControllerAction($action) {$/;"	f
setData	Etc/async_response.php	/^	public function setData($data) {$/;"	f
setLimitCookie	Config/user_init.php	/^function setLimitCookie($limit)$/;"	f
setListLimitCookie	Config/user_init.php	/^function setListLimitCookie($lim = null)$/;"	f
setLoCookie	Config/user_init.php	/^function setLoCookie($layoutType)$/;"	f
setMessage	Etc/async_response.php	/^	public function setMessage($msg) {$/;"	f
setMetaDesc	Router/output.php	/^	public function setMetaDesc($metaDesc) {$/;"	f
setPageInfo	Router/output.php	/^	public function setPageInfo($info) {$/;"	f
setSection	Router/output.php	/^	public function setSection($section) {$/;"	f
setTemplate	Router/output.php	/^	public function setTemplate($templatePath) {$/;"	f
setTitle	Etc/async_response.php	/^	public function setTitle($title) {$/;"	f
setTitle	Router/output.php	/^	public function setTitle($title) {$/;"	f
settings	Config/settings.php	/^		$settings	=	self::parseIni($ini, $processSections);$/;"	v
settings	Config/settings.php	/^		$settings = [];$/;"	v
settings	Config/settings.php	/^		$settings = parse_ini_file($ini, $processSections);$/;"	v
settings	Etc/user_manager.php	/^		$this->settings	= $settings;$/;"	v
settings	Etc/user_manager.php	/^	protected $settings;$/;"	v
settings	Router/router.php	/^			$settings	=	new PublicSettings();$/;"	v
success	Etc/async_response.php	/^			$this->success	=	$args['success'];$/;"	v
success	Etc/async_response.php	/^	private $success	=	null;$/;"	v
table	Db/db_pdo.php	/^		$table	=	(isset($options['table'])) ? $options['table'] : null;$/;"	v
tableExists	Db/db_pdo.php	/^	private function tableExists($table) {$/;"	f
templatePath	Router/output.php	/^		$this->templatePath	= $templatePath;$/;"	v
templatePath	Router/output.php	/^	protected $templatePath	=	null;$/;"	v
title	Etc/async_response.php	/^		$this->title	=	htmlentities($title);$/;"	v
title	Etc/async_response.php	/^		$this->title = (isset($args['title']))$/;"	v
title	Etc/async_response.php	/^	private $title;$/;"	v
title	Router/output.php	/^		$this->title = htmlspecialchars($title);$/;"	v
title	Router/output.php	/^	protected $title		=	null;$/;"	v
toggleServeContentOnly	Router/router.php	/^	public function toggleServeContentOnly($setting = null) {$/;"	f
un	Etc/user_manager.php	/^		$un		=	htmlentities($credentials['un'], ENT_QUOTES) . '@atlanticlabequipment.com';$/;"	v
unload	Config/settings.php	/^	public static function unload()$/;"	f
unpackSettings	Config/settings.php	/^	private static function unpackSettings($array)$/;"	f
update	Db/db_pdo.php	/^	public function update($table) {$/;"	f
url	Etc/request.php	/^		$url	=	'?';$/;"	v
url	Etc/request.php	/^		$url	=	substr($url, 0, -1); \/\/ Removes last ampersand.$/;"	v
user	Db/db_factory.php	/^		$user	=	parent::getDirective('db', 'username');$/;"	v
user	Etc/dependency_container.php	/^		$this->user		=	$user;$/;"	v
user	Etc/dependency_container.php	/^	public $user;$/;"	v
user	Etc/user_manager.php	/^			$this->user = $loggedInUser;$/;"	v
user	Etc/user_manager.php	/^		$this->user	= ($this->isLoggedIn()) ? Sentinel::check() : null;	$/;"	v
user	Etc/user_manager.php	/^		$user		=	$this->findUser($credentials);$/;"	v
user	Etc/user_manager.php	/^		$user	=	Sentinel::findByCredentials([$/;"	v
user	Etc/user_manager.php	/^	protected $user	=	null;$/;"	v
user	Router/router.php	/^			$this->user		=	$dc->user;$/;"	v
user	Router/router.php	/^			$user		=	new UserManager($request, $settings);$/;"	v
user	Router/router.php	/^	protected	$user;$/;"	v
userIsValid	Etc/user_manager.php	/^		$userIsValid=	$this->validateUserCredentials($user, [$/;"	v
username	Db/db_pdo.php	/^		$this->username	=	$un;$/;"	v
username	Db/db_pdo.php	/^	private	$username;$/;"	v
validateField	Db/db_pdo.php	/^	private function validateField($fieldName) {$/;"	f
validateListOfFields	Db/db_pdo.php	/^	private function validateListOfFields(array $fields) {$/;"	f
validateQuery	Db/prepared_stmt.php	/^	private function validateQuery($query) {$/;"	f
validateTable	Db/db_pdo.php	/^	private function validateTable($table) {$/;"	f
validateUserCredentials	Etc/user_manager.php	/^	protected function validateUserCredentials($user, array $credentials)$/;"	f
value	Config/settings.php	/^				$value	=	$dirSet[$key];$/;"	v
value	Config/settings.php	/^			$value 		=	self::getDirectiveValue($sectionDirs, $key);$/;"	v
value	Config/settings.php	/^		$value	=	(isset($dirs[$key])) ? $dirs[$key] : null;$/;"	v
value	Db/query_field.php	/^		$this->value	=	$value;$/;"	v
